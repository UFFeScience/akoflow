// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/repository/activity_repository/activity_repository.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/repository/activity_repository/activity_repository.go --destination=test/mock/activity_repository_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	workflow "github.com/ovvesley/scik8sflow/pkg/server/entities/workflow"
	activity_repository "github.com/ovvesley/scik8sflow/pkg/server/repository/activity_repository"
	gomock "go.uber.org/mock/gomock"
)

// MockIActivityRepository is a mock of IActivityRepository interface.
type MockIActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIActivityRepositoryMockRecorder
}

// MockIActivityRepositoryMockRecorder is the mock recorder for MockIActivityRepository.
type MockIActivityRepositoryMockRecorder struct {
	mock *MockIActivityRepository
}

// NewMockIActivityRepository creates a new mock instance.
func NewMockIActivityRepository(ctrl *gomock.Controller) *MockIActivityRepository {
	mock := &MockIActivityRepository{ctrl: ctrl}
	mock.recorder = &MockIActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivityRepository) EXPECT() *MockIActivityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIActivityRepository) Create(namespace string, workflowId int, image string, activities []workflow.WorkflowActivities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", namespace, workflowId, image, activities)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIActivityRepositoryMockRecorder) Create(namespace, workflowId, image, activities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIActivityRepository)(nil).Create), namespace, workflowId, image, activities)
}

// Find mocks base method.
func (m *MockIActivityRepository) Find(id int) (workflow.WorkflowActivities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(workflow.WorkflowActivities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIActivityRepositoryMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIActivityRepository)(nil).Find), id)
}

// GetActivitiesByWorkflowIds mocks base method.
func (m *MockIActivityRepository) GetActivitiesByWorkflowIds(ids []int) (activity_repository.ResultGetActivitiesByWorkflowIds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByWorkflowIds", ids)
	ret0, _ := ret[0].(activity_repository.ResultGetActivitiesByWorkflowIds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByWorkflowIds indicates an expected call of GetActivitiesByWorkflowIds.
func (mr *MockIActivityRepositoryMockRecorder) GetActivitiesByWorkflowIds(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByWorkflowIds", reflect.TypeOf((*MockIActivityRepository)(nil).GetActivitiesByWorkflowIds), ids)
}

// GetByWorkflowId mocks base method.
func (m *MockIActivityRepository) GetByWorkflowId(id int) ([]workflow.WorkflowActivities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWorkflowId", id)
	ret0, _ := ret[0].([]workflow.WorkflowActivities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowId indicates an expected call of GetByWorkflowId.
func (mr *MockIActivityRepositoryMockRecorder) GetByWorkflowId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWorkflowId", reflect.TypeOf((*MockIActivityRepository)(nil).GetByWorkflowId), id)
}

// UpdateStatus mocks base method.
func (m *MockIActivityRepository) UpdateStatus(id, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIActivityRepositoryMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIActivityRepository)(nil).UpdateStatus), id, status)
}

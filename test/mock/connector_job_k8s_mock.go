// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/connector/connector_job_k8s/connector_job_k8s.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/connector/connector_job_k8s/connector_job_k8s.go --destination=test/mock/connector_job_k8s_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connector_job_k8s "github.com/ovvesley/scientific-workflow-k8s/pkg/server/connector/connector_job_k8s"
	k8sjob "github.com/ovvesley/scientific-workflow-k8s/pkg/server/k8sjob"
	gomock "go.uber.org/mock/gomock"
)

// MockIConnectorJob is a mock of IConnectorJob interface.
type MockIConnectorJob struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectorJobMockRecorder
}

// MockIConnectorJobMockRecorder is the mock recorder for MockIConnectorJob.
type MockIConnectorJobMockRecorder struct {
	mock *MockIConnectorJob
}

// NewMockIConnectorJob creates a new mock instance.
func NewMockIConnectorJob(ctrl *gomock.Controller) *MockIConnectorJob {
	mock := &MockIConnectorJob{ctrl: ctrl}
	mock.recorder = &MockIConnectorJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectorJob) EXPECT() *MockIConnectorJobMockRecorder {
	return m.recorder
}

// ApplyJob mocks base method.
func (m *MockIConnectorJob) ApplyJob(namespace string, job k8sjob.K8sJob) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyJob", namespace, job)
	ret0, _ := ret[0].(any)
	return ret0
}

// ApplyJob indicates an expected call of ApplyJob.
func (mr *MockIConnectorJobMockRecorder) ApplyJob(namespace, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyJob", reflect.TypeOf((*MockIConnectorJob)(nil).ApplyJob), namespace, job)
}

// GetJob mocks base method.
func (m *MockIConnectorJob) GetJob(namespace, jobName string) (connector_job_k8s.ResponseGetJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", namespace, jobName)
	ret0, _ := ret[0].(connector_job_k8s.ResponseGetJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockIConnectorJobMockRecorder) GetJob(namespace, jobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockIConnectorJob)(nil).GetJob), namespace, jobName)
}

// ListJobs mocks base method.
func (m *MockIConnectorJob) ListJobs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListJobs")
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockIConnectorJobMockRecorder) ListJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockIConnectorJob)(nil).ListJobs))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/connector/connector_namespace_k8s/connector_namespace_k8s.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/connector/connector_namespace_k8s/connector_namespace_k8s.go --destination=test/mock/connector_namespace_k8s_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connector_namespace_k8s "github.com/ovvesley/scik8sflow/pkg/server/connector/connector_namespace_k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockIConnectorNamespace is a mock of IConnectorNamespace interface.
type MockIConnectorNamespace struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectorNamespaceMockRecorder
}

// MockIConnectorNamespaceMockRecorder is the mock recorder for MockIConnectorNamespace.
type MockIConnectorNamespaceMockRecorder struct {
	mock *MockIConnectorNamespace
}

// NewMockIConnectorNamespace creates a new mock instance.
func NewMockIConnectorNamespace(ctrl *gomock.Controller) *MockIConnectorNamespace {
	mock := &MockIConnectorNamespace{ctrl: ctrl}
	mock.recorder = &MockIConnectorNamespaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectorNamespace) EXPECT() *MockIConnectorNamespaceMockRecorder {
	return m.recorder
}

// CreateNamespace mocks base method.
func (m *MockIConnectorNamespace) CreateNamespace(namespace string) (connector_namespace_k8s.ResponseCreateNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNamespace", namespace)
	ret0, _ := ret[0].(connector_namespace_k8s.ResponseCreateNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNamespace indicates an expected call of CreateNamespace.
func (mr *MockIConnectorNamespaceMockRecorder) CreateNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNamespace", reflect.TypeOf((*MockIConnectorNamespace)(nil).CreateNamespace), namespace)
}

// GetNamespace mocks base method.
func (m *MockIConnectorNamespace) GetNamespace(namespace string) (connector_namespace_k8s.ResponseGetNamespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", namespace)
	ret0, _ := ret[0].(connector_namespace_k8s.ResponseGetNamespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockIConnectorNamespaceMockRecorder) GetNamespace(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockIConnectorNamespace)(nil).GetNamespace), namespace)
}

// ListNamespaces mocks base method.
func (m *MockIConnectorNamespace) ListNamespaces() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListNamespaces")
}

// ListNamespaces indicates an expected call of ListNamespaces.
func (mr *MockIConnectorNamespaceMockRecorder) ListNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNamespaces", reflect.TypeOf((*MockIConnectorNamespace)(nil).ListNamespaces))
}

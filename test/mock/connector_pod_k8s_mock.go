// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/connector/connector_pod_k8s/connector_pod_k8s.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/connector/connector_pod_k8s/connector_pod_k8s.go --destination=test/mock/connector_pod_k8s_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connector_pod_k8s "github.com/ovvesley/scientific-workflow-k8s/pkg/server/connector/connector_pod_k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockIConnectorPod is a mock of IConnectorPod interface.
type MockIConnectorPod struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectorPodMockRecorder
}

// MockIConnectorPodMockRecorder is the mock recorder for MockIConnectorPod.
type MockIConnectorPodMockRecorder struct {
	mock *MockIConnectorPod
}

// NewMockIConnectorPod creates a new mock instance.
func NewMockIConnectorPod(ctrl *gomock.Controller) *MockIConnectorPod {
	mock := &MockIConnectorPod{ctrl: ctrl}
	mock.recorder = &MockIConnectorPodMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectorPod) EXPECT() *MockIConnectorPodMockRecorder {
	return m.recorder
}

// GetPodByJob mocks base method.
func (m *MockIConnectorPod) GetPodByJob(namespace, jobName string) (connector_pod_k8s.ResponseGetJobByPod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodByJob", namespace, jobName)
	ret0, _ := ret[0].(connector_pod_k8s.ResponseGetJobByPod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodByJob indicates an expected call of GetPodByJob.
func (mr *MockIConnectorPodMockRecorder) GetPodByJob(namespace, jobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodByJob", reflect.TypeOf((*MockIConnectorPod)(nil).GetPodByJob), namespace, jobName)
}

// GetPodLogs mocks base method.
func (m *MockIConnectorPod) GetPodLogs(namespace, podName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodLogs", namespace, podName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPodLogs indicates an expected call of GetPodLogs.
func (mr *MockIConnectorPodMockRecorder) GetPodLogs(namespace, podName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodLogs", reflect.TypeOf((*MockIConnectorPod)(nil).GetPodLogs), namespace, podName)
}

// ListPods mocks base method.
func (m *MockIConnectorPod) ListPods() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListPods")
}

// ListPods indicates an expected call of ListPods.
func (mr *MockIConnectorPodMockRecorder) ListPods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPods", reflect.TypeOf((*MockIConnectorPod)(nil).ListPods))
}

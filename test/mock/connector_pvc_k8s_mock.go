// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/connector/connector_pvc_k8s/connector_pvc_k8s.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/connector/connector_pvc_k8s/connector_pvc_k8s.go --destination=test/mock/connector_pvc_k8s_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	connector_pvc_k8s "github.com/ovvesley/scientific-workflow-k8s/pkg/server/connector/connector_pvc_k8s"
	gomock "go.uber.org/mock/gomock"
)

// MockIConnectorPvc is a mock of IConnectorPvc interface.
type MockIConnectorPvc struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectorPvcMockRecorder
}

// MockIConnectorPvcMockRecorder is the mock recorder for MockIConnectorPvc.
type MockIConnectorPvcMockRecorder struct {
	mock *MockIConnectorPvc
}

// NewMockIConnectorPvc creates a new mock instance.
func NewMockIConnectorPvc(ctrl *gomock.Controller) *MockIConnectorPvc {
	mock := &MockIConnectorPvc{ctrl: ctrl}
	mock.recorder = &MockIConnectorPvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectorPvc) EXPECT() *MockIConnectorPvcMockRecorder {
	return m.recorder
}

// CreatePersistentVolumeClain mocks base method.
func (m *MockIConnectorPvc) CreatePersistentVolumeClain(name, namespace, storageSize, storageClassName string) (connector_pvc_k8s.ResponseCreatePersistentVolumeClain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePersistentVolumeClain", name, namespace, storageSize, storageClassName)
	ret0, _ := ret[0].(connector_pvc_k8s.ResponseCreatePersistentVolumeClain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePersistentVolumeClain indicates an expected call of CreatePersistentVolumeClain.
func (mr *MockIConnectorPvcMockRecorder) CreatePersistentVolumeClain(name, namespace, storageSize, storageClassName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePersistentVolumeClain", reflect.TypeOf((*MockIConnectorPvc)(nil).CreatePersistentVolumeClain), name, namespace, storageSize, storageClassName)
}

// GetPersistentVolumeClain mocks base method.
func (m *MockIConnectorPvc) GetPersistentVolumeClain(name, namespace string) (connector_pvc_k8s.ResponseGetPersistentVolumeClain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersistentVolumeClain", name, namespace)
	ret0, _ := ret[0].(connector_pvc_k8s.ResponseGetPersistentVolumeClain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersistentVolumeClain indicates an expected call of GetPersistentVolumeClain.
func (mr *MockIConnectorPvcMockRecorder) GetPersistentVolumeClain(name, namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersistentVolumeClain", reflect.TypeOf((*MockIConnectorPvc)(nil).GetPersistentVolumeClain), name, namespace)
}

// ListPvcs mocks base method.
func (m *MockIConnectorPvc) ListPvcs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListPvcs")
}

// ListPvcs indicates an expected call of ListPvcs.
func (mr *MockIConnectorPvcMockRecorder) ListPvcs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPvcs", reflect.TypeOf((*MockIConnectorPvc)(nil).ListPvcs))
}

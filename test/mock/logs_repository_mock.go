// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/repository/logs_repository/logs_repository.go
//
// Generated by this command:
//
//	mockgen --source=pkg/server/repository/logs_repository/logs_repository.go --destination=test/mock/logs_repository_mock.go --package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	logs_repository "github.com/ovvesley/akoflow/pkg/server/repository/logs_repository"
	gomock "go.uber.org/mock/gomock"
)

// MockILogsRepository is a mock of ILogsRepository interface.
type MockILogsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockILogsRepositoryMockRecorder
}

// MockILogsRepositoryMockRecorder is the mock recorder for MockILogsRepository.
type MockILogsRepositoryMockRecorder struct {
	mock *MockILogsRepository
}

// NewMockILogsRepository creates a new mock instance.
func NewMockILogsRepository(ctrl *gomock.Controller) *MockILogsRepository {
	mock := &MockILogsRepository{ctrl: ctrl}
	mock.recorder = &MockILogsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogsRepository) EXPECT() *MockILogsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockILogsRepository) Create(params logs_repository.ParamsLogsCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockILogsRepositoryMockRecorder) Create(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockILogsRepository)(nil).Create), params)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/connector/server_connector/server_connector_workflow/server_connector_workflow.go
//
// Generated by this command:
//
//	mockgen -source=pkg/client/connector/server_connector/server_connector_workflow/server_connector_workflow.go -destination=tests/mocks/pkg/client/connector/server_connector/server_connector_workflow/server_connector_workflow_mock.go -package=server_connector_workflow
//

// Package server_connector_workflow is a generated GoMock package.
package server_connector_workflow

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIWorkflow is a mock of IWorkflow interface.
type MockIWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockIWorkflowMockRecorder
	isgomock struct{}
}

// MockIWorkflowMockRecorder is the mock recorder for MockIWorkflow.
type MockIWorkflowMockRecorder struct {
	mock *MockIWorkflow
}

// NewMockIWorkflow creates a new mock instance.
func NewMockIWorkflow(ctrl *gomock.Controller) *MockIWorkflow {
	mock := &MockIWorkflow{ctrl: ctrl}
	mock.recorder = &MockIWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWorkflow) EXPECT() *MockIWorkflowMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIWorkflow) Run(host, port, base64FileContent string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", host, port, base64FileContent)
}

// Run indicates an expected call of Run.
func (mr *MockIWorkflowMockRecorder) Run(host, port, base64FileContent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIWorkflow)(nil).Run), host, port, base64FileContent)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: /app/pkg/server/repository/activity_repository/activity_repository.go
//
// Generated by this command:
//
//	mockgen -source=/app/pkg/server/repository/activity_repository/activity_repository.go -destination=tests/mocks/pkg/server/repository/activity_repository/activity_repository.go -package=activity_repository
//

// Package activity_repository is a generated GoMock package.
package activity_repository

import (
	reflect "reflect"

	workflow_activity_entity "github.com/ovvesley/akoflow/pkg/server/entities/workflow_activity_entity"
	activity_repository "github.com/ovvesley/akoflow/pkg/server/repository/activity_repository"
	gomock "go.uber.org/mock/gomock"
)

// MockIActivityRepository is a mock of IActivityRepository interface.
type MockIActivityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIActivityRepositoryMockRecorder
	isgomock struct{}
}

// MockIActivityRepositoryMockRecorder is the mock recorder for MockIActivityRepository.
type MockIActivityRepositoryMockRecorder struct {
	mock *MockIActivityRepository
}

// NewMockIActivityRepository creates a new mock instance.
func NewMockIActivityRepository(ctrl *gomock.Controller) *MockIActivityRepository {
	mock := &MockIActivityRepository{ctrl: ctrl}
	mock.recorder = &MockIActivityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivityRepository) EXPECT() *MockIActivityRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIActivityRepository) Create(namespace string, workflowId int, image string, activities []workflow_activity_entity.WorkflowActivities) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", namespace, workflowId, image, activities)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIActivityRepositoryMockRecorder) Create(namespace, workflowId, image, activities any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIActivityRepository)(nil).Create), namespace, workflowId, image, activities)
}

// Find mocks base method.
func (m *MockIActivityRepository) Find(id int) (workflow_activity_entity.WorkflowActivities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(workflow_activity_entity.WorkflowActivities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIActivityRepositoryMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIActivityRepository)(nil).Find), id)
}

// FindPreActivity mocks base method.
func (m *MockIActivityRepository) FindPreActivity(id int) (workflow_activity_entity.WorkflowPreActivityDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPreActivity", id)
	ret0, _ := ret[0].(workflow_activity_entity.WorkflowPreActivityDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPreActivity indicates an expected call of FindPreActivity.
func (mr *MockIActivityRepositoryMockRecorder) FindPreActivity(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPreActivity", reflect.TypeOf((*MockIActivityRepository)(nil).FindPreActivity), id)
}

// GetActivitiesByWorkflowIds mocks base method.
func (m *MockIActivityRepository) GetActivitiesByWorkflowIds(ids []int) (activity_repository.ResultGetActivitiesByWorkflowIds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivitiesByWorkflowIds", ids)
	ret0, _ := ret[0].(activity_repository.ResultGetActivitiesByWorkflowIds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivitiesByWorkflowIds indicates an expected call of GetActivitiesByWorkflowIds.
func (mr *MockIActivityRepositoryMockRecorder) GetActivitiesByWorkflowIds(ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivitiesByWorkflowIds", reflect.TypeOf((*MockIActivityRepository)(nil).GetActivitiesByWorkflowIds), ids)
}

// GetByWorkflowId mocks base method.
func (m *MockIActivityRepository) GetByWorkflowId(id int) ([]workflow_activity_entity.WorkflowActivities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByWorkflowId", id)
	ret0, _ := ret[0].([]workflow_activity_entity.WorkflowActivities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByWorkflowId indicates an expected call of GetByWorkflowId.
func (mr *MockIActivityRepositoryMockRecorder) GetByWorkflowId(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByWorkflowId", reflect.TypeOf((*MockIActivityRepository)(nil).GetByWorkflowId), id)
}

// GetPreactivitiesCompleted mocks base method.
func (m *MockIActivityRepository) GetPreactivitiesCompleted() ([]workflow_activity_entity.WorkflowPreActivityDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreactivitiesCompleted")
	ret0, _ := ret[0].([]workflow_activity_entity.WorkflowPreActivityDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreactivitiesCompleted indicates an expected call of GetPreactivitiesCompleted.
func (mr *MockIActivityRepositoryMockRecorder) GetPreactivitiesCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreactivitiesCompleted", reflect.TypeOf((*MockIActivityRepository)(nil).GetPreactivitiesCompleted))
}

// GetWfaDependencies mocks base method.
func (m *MockIActivityRepository) GetWfaDependencies(workflowId int) ([]workflow_activity_entity.WorkflowActivityDependencyDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWfaDependencies", workflowId)
	ret0, _ := ret[0].([]workflow_activity_entity.WorkflowActivityDependencyDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWfaDependencies indicates an expected call of GetWfaDependencies.
func (mr *MockIActivityRepositoryMockRecorder) GetWfaDependencies(workflowId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWfaDependencies", reflect.TypeOf((*MockIActivityRepository)(nil).GetWfaDependencies), workflowId)
}

// UpdatePreActivity mocks base method.
func (m *MockIActivityRepository) UpdatePreActivity(id int, preactivity workflow_activity_entity.WorkflowPreActivityDatabase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePreActivity", id, preactivity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePreActivity indicates an expected call of UpdatePreActivity.
func (mr *MockIActivityRepositoryMockRecorder) UpdatePreActivity(id, preactivity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePreActivity", reflect.TypeOf((*MockIActivityRepository)(nil).UpdatePreActivity), id, preactivity)
}

// UpdateStatus mocks base method.
func (m *MockIActivityRepository) UpdateStatus(id, status int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIActivityRepositoryMockRecorder) UpdateStatus(id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIActivityRepository)(nil).UpdateStatus), id, status)
}

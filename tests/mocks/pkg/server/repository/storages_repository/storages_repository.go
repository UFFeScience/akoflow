// Code generated by MockGen. DO NOT EDIT.
// Source: /app/pkg/server/repository/storages_repository/storages_repository.go
//
// Generated by this command:
//
//	mockgen -source=/app/pkg/server/repository/storages_repository/storages_repository.go -destination=tests/mocks/pkg/server/repository/storages_repository/storages_repository.go -package=storages_repository storages_repository
//

// Package storages_repository is a generated GoMock package.
package storages_repository

import (
	reflect "reflect"

	storages_repository "github.com/ovvesley/akoflow/pkg/server/repository/storages_repository"
	gomock "go.uber.org/mock/gomock"
)

// MockIStorageRepository is a mock of IStorageRepository interface.
type MockIStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockIStorageRepositoryMockRecorder is the mock recorder for MockIStorageRepository.
type MockIStorageRepositoryMockRecorder struct {
	mock *MockIStorageRepository
}

// NewMockIStorageRepository creates a new mock instance.
func NewMockIStorageRepository(ctrl *gomock.Controller) *MockIStorageRepository {
	mock := &MockIStorageRepository{ctrl: ctrl}
	mock.recorder = &MockIStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageRepository) EXPECT() *MockIStorageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIStorageRepository) Create(params storages_repository.ParamsStorageCreate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIStorageRepositoryMockRecorder) Create(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIStorageRepository)(nil).Create), params)
}

// Find mocks base method.
func (m *MockIStorageRepository) Find(id int) (storages_repository.StorageDatabase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(storages_repository.StorageDatabase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIStorageRepositoryMockRecorder) Find(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIStorageRepository)(nil).Find), id)
}

// GetCreatedStorages mocks base method.
func (m *MockIStorageRepository) GetCreatedStorages(namespace string) []storages_repository.StorageDatabase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedStorages", namespace)
	ret0, _ := ret[0].([]storages_repository.StorageDatabase)
	return ret0
}

// GetCreatedStorages indicates an expected call of GetCreatedStorages.
func (mr *MockIStorageRepositoryMockRecorder) GetCreatedStorages(namespace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedStorages", reflect.TypeOf((*MockIStorageRepository)(nil).GetCreatedStorages), namespace)
}

// Update mocks base method.
func (m *MockIStorageRepository) Update(params storages_repository.ParamsStorageUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIStorageRepositoryMockRecorder) Update(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIStorageRepository)(nil).Update), params)
}

// UpdateDetached mocks base method.
func (m *MockIStorageRepository) UpdateDetached(activityId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDetached", activityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDetached indicates an expected call of UpdateDetached.
func (mr *MockIStorageRepositoryMockRecorder) UpdateDetached(activityId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDetached", reflect.TypeOf((*MockIStorageRepository)(nil).UpdateDetached), activityId)
}

// UpdateEndDiskSpec mocks base method.
func (m *MockIStorageRepository) UpdateEndDiskSpec(activityId int, fileSpec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndDiskSpec", activityId, fileSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndDiskSpec indicates an expected call of UpdateEndDiskSpec.
func (mr *MockIStorageRepositoryMockRecorder) UpdateEndDiskSpec(activityId, fileSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndDiskSpec", reflect.TypeOf((*MockIStorageRepository)(nil).UpdateEndDiskSpec), activityId, fileSpec)
}

// UpdateEndFileListDisk mocks base method.
func (m *MockIStorageRepository) UpdateEndFileListDisk(activityId int, fileDisk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndFileListDisk", activityId, fileDisk)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndFileListDisk indicates an expected call of UpdateEndFileListDisk.
func (mr *MockIStorageRepositoryMockRecorder) UpdateEndFileListDisk(activityId, fileDisk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndFileListDisk", reflect.TypeOf((*MockIStorageRepository)(nil).UpdateEndFileListDisk), activityId, fileDisk)
}

// UpdateInitialDiskSpec mocks base method.
func (m *MockIStorageRepository) UpdateInitialDiskSpec(activityId int, fileSpec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInitialDiskSpec", activityId, fileSpec)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInitialDiskSpec indicates an expected call of UpdateInitialDiskSpec.
func (mr *MockIStorageRepositoryMockRecorder) UpdateInitialDiskSpec(activityId, fileSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitialDiskSpec", reflect.TypeOf((*MockIStorageRepository)(nil).UpdateInitialDiskSpec), activityId, fileSpec)
}

// UpdateInitialFileListDisk mocks base method.
func (m *MockIStorageRepository) UpdateInitialFileListDisk(activityId int, fileDisk string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInitialFileListDisk", activityId, fileDisk)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInitialFileListDisk indicates an expected call of UpdateInitialFileListDisk.
func (mr *MockIStorageRepositoryMockRecorder) UpdateInitialFileListDisk(activityId, fileDisk any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInitialFileListDisk", reflect.TypeOf((*MockIStorageRepository)(nil).UpdateInitialFileListDisk), activityId, fileDisk)
}
